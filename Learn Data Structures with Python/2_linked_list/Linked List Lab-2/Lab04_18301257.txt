class Node:
  def __init__(self, e, n, p):
    self.element = e
    self.next = n
    self.prev = p

from typing import List

class DoublyList:
  
  def __init__(self, a):
  #  Design the constructor based on data type of a. If 'a' is built in python list then
  #  Creates a linked list using the values from the given array.
    self.head = None
    dh=Node(None,None,None) 
    #if type(a)== list:
    self.head=dh
    tail = dh
    for i in range(len(a)):
      new_node = Node(a[i], None, None)
      tail.next = new_node
      new_node.prev=tail
      tail=tail.next
    tail.next=self.head
    self.head.prev=tail
  

  # Counts the number of Nodes in the list

  def countNode(self):
    temp=self.head
    count=0
    while temp.next!=self.head:
      temp=temp.next
      count+=1
    return count
    

  # prints the elements in the list
  def forwardprint(self):
    temp=self.head.next
    while(temp!=self.head):
        if temp.next==self.head:
          print(temp.element)
        else:
          print(temp.element,end=" ")
        temp=temp.next
        

  # prints the elements in the list backward
  def backwardprint(self):
    temp=self.head.prev
    while(temp!=self.head):
        print(temp.element)
        temp=temp.prev


  # returns the reference of the at the given index. For invalid index return None.
  def nodeAt(self, idx):
    temp=self.head.next
    count=0
    last_idx=self.countNode()
    if idx>=0 and idx<last_idx:
      while temp!=None:
        if count==idx:
          return temp
        count+=1
        temp=temp.next
      else:
        return None

  
  # returns the index of the containing the given element. if the element does not exist in the List, return -1.
  def indexOf(self, elem):
    temp=self.head
    idx=0
    while temp!=None:
      if temp.element==elem:
        return idx
      idx=idx+1
      temp=temp.next
    if self.countNode()==idx:
      return -1


  # inserts containing the given element at the given index Check validity of index. 
  def insert(self, elem, idx):

    con = False
    if idx == 0:
      new = Node(elem, self.head, None)
      self.head.prev = new
      self.head = new
    else:
      n = self.head
      c = 0
      while n != None:
        n = n.next
        if con is False:
          n = self.head
          while n != None:
            c = c + 1
            if n.e == elem:
              con = True
              print("key already exists.")
            if c == idx:
              new = Node(elem, n.next, n.prev)
              n.next.prev = new
              n.prev.next = new
            n = n.next

  # removes at the given index. returns element of the removed node. Check validity of index. return None if index is invalid.
  def remove(self, idx):
    if self.head == None:
      print("List is empty")
    else:
      c = 0
      head = self.head
      while head != None:
        if idx == c:
          head.next.prev = head.prev
          head.prev.next = head.next
        c=c+1
        head = head.next
        if idx > c:
          return None